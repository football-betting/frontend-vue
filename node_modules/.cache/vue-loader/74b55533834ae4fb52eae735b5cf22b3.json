{"remainingRequest":"/Users/kaiurban/Projekte/own_projects/vue-website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kaiurban/Projekte/own_projects/vue-website/node_modules/vue-material/src/components/MdList/MdListItem/MdListItemExpand.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kaiurban/Projekte/own_projects/vue-website/node_modules/vue-material/src/components/MdList/MdListItem/MdListItemExpand.vue","mtime":499162500000},{"path":"/Users/kaiurban/Projekte/own_projects/vue-website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kaiurban/Projekte/own_projects/vue-website/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/kaiurban/Projekte/own_projects/vue-website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kaiurban/Projekte/own_projects/vue-website/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCByYWYgZnJvbSAncmFmJwppbXBvcnQgTWRBcnJvd0Rvd25JY29uIGZyb20gJ2NvcmUvaWNvbnMvTWRBcnJvd0Rvd25JY29uJwppbXBvcnQgTWRMaXN0SXRlbU1peGluIGZyb20gJy4vTWRMaXN0SXRlbU1peGluJwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdNZExpc3RJdGVtRXhwYW5kJywKICBjb21wb25lbnRzOiB7CiAgICBNZEFycm93RG93bkljb24KICB9LAogIG1peGluczogW01kTGlzdEl0ZW1NaXhpbl0sCiAgaW5qZWN0OiBbJ01kTGlzdCddLAogIGRhdGE6ICgpID0+ICh7CiAgICBleHBhbmRTdHlsZXM6IHt9LAogICAgc2hvd0NvbnRlbnQ6IGZhbHNlCiAgfSksCiAgcHJvcHM6IHsKICAgIG1kRXhwYW5kZWQ6IEJvb2xlYW4KICB9LAogIGNvbXB1dGVkOiB7CiAgICBleHBhbmRDbGFzc2VzICgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICAnbWQtYWN0aXZlJzogdGhpcy5zaG93Q29udGVudAogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRDaGlsZHJlblNpemUgKCkgewogICAgICBjb25zdCBleHBhbmRFbCA9IHRoaXMuJHJlZnMubGlzdEV4cGFuZAogICAgICBsZXQgc2l6ZSA9IDAKCiAgICAgIEFycmF5LmZyb20oZXhwYW5kRWwuY2hpbGRyZW4pLmZvckVhY2goY2hpbGQgPT4gewogICAgICAgIHNpemUgKz0gY2hpbGQub2Zmc2V0SGVpZ2h0CiAgICAgIH0pCgogICAgICByZXR1cm4gc2l6ZQogICAgfSwKICAgIGZldGNoU3R5bGUgKCkgewogICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7CiAgICAgICAgcmFmKCgpID0+IHsKICAgICAgICAgIGxldCBmdWxsSGVpZ2h0ID0gMAoKICAgICAgICAgIGlmICghdGhpcy5zaG93Q29udGVudCkgewogICAgICAgICAgICBmdWxsSGVpZ2h0ID0gJ2F1dG8nIC8vIHRoaXMuZ2V0Q2hpbGRyZW5TaXplKCkgKyAncHgnCiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5leHBhbmRTdHlsZXMgPSB7IGhlaWdodDogZnVsbEhlaWdodCB9CiAgICAgICAgICByZXNvbHZlKCkKICAgICAgICB9KQogICAgICB9KQogICAgfSwKICAgIHRvZ2dsZUV4cGFuZCAoKSB7CiAgICAgIHRoaXMuZmV0Y2hTdHlsZSgpLnRoZW4oKCkgPT4gewogICAgICAgIHRoaXMuc2hvd0NvbnRlbnQgPSAhdGhpcy5zaG93Q29udGVudAogICAgICB9KQogICAgfSwKICAgIG9wZW4gKCkgewogICAgICBpZiAodGhpcy5zaG93Q29udGVudCkgewogICAgICAgIHJldHVybiBmYWxzZQogICAgICB9CgogICAgICB0aGlzLmZldGNoU3R5bGUoKS50aGVuKCgpID0+IFsKICAgICAgICB0aGlzLnNob3dDb250ZW50ID0gdHJ1ZQogICAgICBdKQogICAgfSwKICAgIGNsb3NlICgpIHsKICAgICAgaWYgKCF0aGlzLnNob3dDb250ZW50KSB7CiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgIH0KCiAgICAgIHRoaXMuZmV0Y2hTdHlsZSgpLnRoZW4oKCkgPT4gewogICAgICAgIHRoaXMuc2hvd0NvbnRlbnQgPSBmYWxzZQogICAgICB9KQogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIG1kRXhwYW5kZWQgKCkgewogICAgICBpZiAodGhpcy5tZEV4cGFuZGVkKSB7CiAgICAgICAgdGhpcy5vcGVuKCkKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmNsb3NlKCkKICAgICAgfQogICAgfSwKICAgIHNob3dDb250ZW50ICgpIHsKICAgICAgbGV0IGV4cGFuZGVkID0gdGhpcy5zaG93Q29udGVudAogICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6bWRFeHBhbmRlZCcsIGV4cGFuZGVkKQogICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB0aGlzLiRlbWl0KGV4cGFuZGVkID8gJ21kLWV4cGFuZGVkJyA6ICdtZC1jb2xsYXBzZWQnKSkKCiAgICAgIGlmIChleHBhbmRlZCkgewogICAgICAgIHRoaXMuTWRMaXN0LmV4cGFuZEFUYWIodGhpcykKICAgICAgfQogICAgfQogIH0sCiAgY3JlYXRlZCAoKSB7CiAgICB0aGlzLk1kTGlzdC5wdXNoRXhwYW5kYWJsZSh0aGlzKQogIH0sCiAgbW91bnRlZCAoKSB7CiAgICBpZiAodGhpcy5tZEV4cGFuZGVkKSB7CiAgICAgIHRoaXMub3BlbigpCiAgICB9CiAgfSwKICBiZWZvcmVEZXN0cm95ICgpIHsKICAgIHRoaXMuTWRMaXN0LnJlbW92ZUV4cGFuZGFibGUodGhpcykKICB9Cn0K"},{"version":3,"sources":["MdListItemExpand.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MdListItemExpand.vue","sourceRoot":"node_modules/vue-material/src/components/MdList/MdListItem","sourcesContent":["<template>\n  <div class=\"md-list-item-expand\" :class=\"expandClasses\">\n    <md-list-item-content :md-disabled=\"isDisabled\" @click.native=\"toggleExpand\">\n      <slot />\n\n      <md-arrow-down-icon class=\"md-list-expand-icon\" />\n    </md-list-item-content>\n\n    <div class=\"md-list-expand\" ref=\"listExpand\" :style=\"expandStyles\">\n      <slot name=\"md-expand\" />\n    </div>\n  </div>\n</template>\n\n<script>\n  import raf from 'raf'\n  import MdArrowDownIcon from 'core/icons/MdArrowDownIcon'\n  import MdListItemMixin from './MdListItemMixin'\n\n  export default {\n    name: 'MdListItemExpand',\n    components: {\n      MdArrowDownIcon\n    },\n    mixins: [MdListItemMixin],\n    inject: ['MdList'],\n    data: () => ({\n      expandStyles: {},\n      showContent: false\n    }),\n    props: {\n      mdExpanded: Boolean\n    },\n    computed: {\n      expandClasses () {\n        return {\n          'md-active': this.showContent\n        }\n      }\n    },\n    methods: {\n      getChildrenSize () {\n        const expandEl = this.$refs.listExpand\n        let size = 0\n\n        Array.from(expandEl.children).forEach(child => {\n          size += child.offsetHeight\n        })\n\n        return size\n      },\n      fetchStyle () {\n        return new Promise(resolve => {\n          raf(() => {\n            let fullHeight = 0\n\n            if (!this.showContent) {\n              fullHeight = 'auto' // this.getChildrenSize() + 'px'\n            }\n\n            this.expandStyles = { height: fullHeight }\n            resolve()\n          })\n        })\n      },\n      toggleExpand () {\n        this.fetchStyle().then(() => {\n          this.showContent = !this.showContent\n        })\n      },\n      open () {\n        if (this.showContent) {\n          return false\n        }\n\n        this.fetchStyle().then(() => [\n          this.showContent = true\n        ])\n      },\n      close () {\n        if (!this.showContent) {\n          return false\n        }\n\n        this.fetchStyle().then(() => {\n          this.showContent = false\n        })\n      }\n    },\n    watch: {\n      mdExpanded () {\n        if (this.mdExpanded) {\n          this.open()\n        } else {\n          this.close()\n        }\n      },\n      showContent () {\n        let expanded = this.showContent\n        this.$emit('update:mdExpanded', expanded)\n        this.$nextTick(() => this.$emit(expanded ? 'md-expanded' : 'md-collapsed'))\n\n        if (expanded) {\n          this.MdList.expandATab(this)\n        }\n      }\n    },\n    created () {\n      this.MdList.pushExpandable(this)\n    },\n    mounted () {\n      if (this.mdExpanded) {\n        this.open()\n      }\n    },\n    beforeDestroy () {\n      this.MdList.removeExpandable(this)\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n  @import \"~components/MdAnimation/variables\";\n\n  .md-list-item-expand {\n    border-top: 1px solid transparent;\n    border-bottom: 1px solid transparent;\n    transition: border .4s $md-transition-stand-timing;\n    will-change: border;\n\n    &.md-active {\n      > .md-list-item-content > .md-list-expand-icon {\n        perspective: 1000px;\n        perspective-origin: 50% 50%;\n        transform: rotateX(180deg);\n      }\n\n      .md-list-expand {\n        opacity: 1;\n        transform: translate3D(0, 0, 0);\n      }\n    }\n\n    .md-list-expand {\n      height: 0;\n      opacity: 0;\n      overflow: hidden;\n      transform: translate3D(0, -24px, 0);\n      transition: .4s $md-transition-stand-timing;\n      transition-property: transform, opacity;\n      will-change: transform, opacity;\n    }\n\n    .md-list-expand-icon {\n      transition: transform .4s $md-transition-stand-timing;\n      will-change: transform;\n    }\n  }\n</style>\n"]}]}